#!/usr/bin/env bash

#****F* testlib.sh/run_tests.sh
# NAME
#   run_tests.bsh
# INPUTS
#   [$1...] - Test scripts. Default all test-*.bsh
# OUTPUT
#   stdout - List of tests as they pass. Stdout, stderr, and env of tests that
#            fail.
# AUTHOR
#   Rick Olson
# COPYRIGHT
#   Original version: (c) 2016 by GitHub <http://github.com>
#   License: MIT
# MODIFICATION HISTORY
#   Andy Neff - Simplified
#               Move to bsh file names
#***

set -eu

cd "$(dirname "${BASH_SOURCE[0]}")"

#****d* run_tests.sh/VERBOSE_LOGS
# NAME
#   VERBOSE_LOGS - Adds additional verbose printouts
# DESCRIPTION
#   Enables additional printouts when testings, such as:
#   - Print environment if at least one test fails
#
#  Default: 0
# EXAMPLE
#   VERBOSE_LOGS=1
# AUTHOR
#   Andy Neff
#***
: ${VERBOSE_LOGS=0}
#****d* run_tests.sh/TESTS_PARALLEL
# NAME
#   TESTS_PARALLEL - Number of test scripts to run in parallel
# DESCRIPTION
#   While the tests inside of a script are all run serially, multiple test
#   scripts are run in parallel. Default: `nproc`
# NOTES
#   In certain complicated scenarios (either race conditions or just TMI), it
#   is benificial to set TESTS_PARALLEL=1 just to simplified debugging
# AUTHOR
#   Andy Neff
#***
: ${TESTS_PARALLEL=`nproc`}

function atexit()
{
  local rv=${1:-$?}

  if [ "$rv" != "0" ] && [ "$VERBOSE_LOGS" == "1" ]; then
    # if [ -s "$REMOTEDIR/gitserver.log" ]; then
    #   echo ""
    #   echo "gitserver.log:"
    #   cat "$REMOTEDIR/gitserver.log"
    # fi

    echo ""
    echo "env:"
    env
  fi

  # Tests cleanup routine here
  rmdir ../tmp

  exit $rv
}

trap "atexit" EXIT

# Test setup/initialization routine here
echo "Running this maxprocs=$TESTS_PARALLEL"
echo

#Get list of filesnames
if [ $# -eq 0 ]; then
  testfiles=(test-*.bsh)
else
  for ((i=1; i<=$#; i++)); do
    testfiles[i]=test-${!i}.bsh
  done
fi

# for file in "${testfiles[@]}"; do
#   echo "0$(cat .$(basename $file).time 2>/dev/null || true) $file"
# done | sort -rnk1 | awk '{ print $2 }' | xargs -I % -P $TESTS_PARALLEL -n 1 /bin/sh -c % --batch

for file in "${testfiles[@]}"; do
  printf "./%s\0" "${file}"
done | sort -z | xargs -0 -I % -P $TESTS_PARALLEL -n 1 /usr/bin/env bash -c % ${TEST_ARGS+"${TEST_ARGS[@]}"}