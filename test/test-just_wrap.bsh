#!/usr/bin/env bash

. "$(dirname ${BASH_SOURCE[0]})/testlib.sh"
. "$(dirname ${BASH_SOURCE[0]})/test_utils.bsh"

VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd)"

# Helper function
function setup_test()
{
  echo 'TEST_LOCAL=2' > local.env
  echo ': ${TEST_VAR1=1}
        : ${TEST_LOCAL=0}
        : ${TEST_LOCAL2=0}
        : ${TEST_LOCAL3=0}
        TEST_VAR2=(11 22 33)' > project1.env
  echo 'TEST_LOCAL2=${TEST_LOCAL}:3' > local_post.env
  touch mywrap
  chmod 755 mywrap

  mkdir -p other_dir
}

# Helper function
function check_values()
{
  # Test the values are correct
  [ "${TEST_VAR1}" == "1" ]
  check_a TEST_VAR2 11 22 33
  [ "${TEST_LOCAL}" == "2" ]
  [ "${TEST_LOCAL2}" == "2:3" ]
  [ "${TEST_LOCAL3}" == "0" ]
}

# Helper function
function test_wrap_call()
(
  echo "#!/usr/bin/env bash
        . '${VSI_COMMON_DIR}/linux/just_wrap' "'"'"$1"'" ${@+"${@}"}' > "$2"

  # Call and copy the variables
  eval "$("$2" declare -p TEST_VAR1 TEST_VAR2 TEST_LOCAL TEST_LOCAL2 TEST_LOCAL3)"
  # test values
  check_values
)

# Helper function
function test_unwrap_call()
(
  # Call and copy the variables
  eval "$("${VSI_COMMON_DIR}/linux/just_wrap" "$1" declare -p TEST_VAR1 TEST_VAR2 TEST_LOCAL TEST_LOCAL2 TEST_LOCAL3)"
  # test values
  check_values
)

# Test two of the mode that just_wrap supports
begin_test "Test call and new shell modes"
(
  set -eu

  setup_test

  # Test both relative and absolute name
  for project_file in "./project1.env" "${TRASHDIR}/project1.env"; do
    # Test relative mywrap call
    test_wrap_call "${project_file}" ./mywrap
    # Test absolute mywrap call
    test_wrap_call "${project_file}" "${TRASHDIR}/mywrap"
    # Test the same call, unwrapped mode
    test_unwrap_call "${project_file}"

    # Test a specific command being called, since the above only tests declare
    # which is a built in command, and operates differently. Making sure it has
    # mywrap in it is one way to know ls worked
    ./mywrap ls | grep mywrap
    # Same, but absolute path
    "${TRASHDIR}/mywrap" ls | grep mywrap
    # Same test, via new shell on stdin
    ./mywrap <<< ls | grep mywrap
    "${TRASHDIR}/mywrap" <<< ls | grep mywrap
    # Same two tests, unwrapped version
    "${VSI_COMMON_DIR}/linux/just_wrap" "${project_file}" ls | grep mywrap
    "${VSI_COMMON_DIR}/linux/just_wrap" "${project_file}" <<< ls | grep mywrap
  done

  # Test all in path
  PATH="$PATH:$(pwd)" test_wrap_call project1.env mywrap
  # Same test but using a new shell on stdin
  PATH="$PATH:$(pwd)" mywrap <<< ls | grep mywrap
  # Same test, unwrapped
  PATH="$PATH:${VSI_COMMON_DIR}/linux/" just_wrap <<< ls | grep mywrap

  # Same group of tests, in another directory
  cd other_dir
  for x in "../project1.env" "${TRASHDIR}/project1.env"; do
    test_wrap_call "${x}" ../mywrap
    test_wrap_call "${x}" ${TRASHDIR}/mywrap

    ../mywrap ls .. | grep mywrap
    "${TRASHDIR}/mywrap" ls "${TRASHDIR}"| grep mywrap
    ../mywrap <<< 'ls ..' | grep mywrap
    "${TRASHDIR}/mywrap" <<< 'ls ..' | grep mywrap

    "${VSI_COMMON_DIR}/linux/just_wrap" "${project_file}" ls .. | grep mywrap
    "${VSI_COMMON_DIR}/linux/just_wrap" "${project_file}" <<< "ls .." | grep mywrap
  done
  PATH="$PATH:$(cd ..; pwd)" test_wrap_call project1.env mywrap
  PATH="$PATH:$(cd ..; pwd)" mywrap <<< 'ls ..' | grep mywrap
)
end_test

# Test that the exec mode really has no extra children
begin_test "Wrap test exec mode"
(
  set -eu

  # Setup
  echo "#!/usr/bin/env bash
        . '${VSI_COMMON_DIR}/linux/just_wrap' "'/dev/null ${@+"${@}"}' > mywrap
  chmod 755 mywrap

  # Run both echo and wrap in the same subshell, and store in array
  #x=($(echo $BASHPID; ./mywrap bash -c 'echo $PPID')) Not OSX compatible
  x=($(bash -c 'echo $PPID'; ./mywrap bash -c 'echo $PPID'))

  # Verify the parent and the subshell are the same pid
  [ "${x[0]}" == "${x[1]}" ]

)
end_test

# Same test, unwrapped
begin_test "Unwrapped test exec mode"
(
  set -eu

  #y=($(echo $BASHPID; "${VSI_COMMON_DIR}/linux/just_wrap" /dev/null bash -c 'echo $PPID'))
  y=($(bash -c 'echo $PPID'; "${VSI_COMMON_DIR}/linux/just_wrap" /dev/null bash -c 'echo $PPID'))
  [ "${y[0]}" == "${y[1]}" ]
)
end_test

# Test that the source mode works as expected
begin_test "Wrap test source"
(
  set -eu

  # Setup
  setup_test
  echo "#!/usr/bin/env bash
        . '${VSI_COMMON_DIR}/linux/just_wrap' '${TRASHDIR}/project1.env' "'${@+"${@}"}' > mywrap

  # Normal source
  (
    . mywrap
    check_values
  )

  # Other dir source
  (
    cd other_dir
    . ../mywrap
    check_values
  )
)
end_test

# Same test, unwrapped
begin_test "Unwrapped test source"
(
  set -eu

  # Need to export some functions so that the bash full shell can finish
  export -f check_values check_a
  # Since this is an "unwrapped" test, I need to make sure that just_wrap
  # doesn't think THIS file is the second layer wrapper! To do this, call a new
  # bash shell. Copy PS4 for nice error messages
  PS4="${PS4}" bash -c "set -euxv
                        . '${VSI_COMMON_DIR}/linux/just_wrap' '${TRASHDIR}/project1.env'
                        check_values"

  (
    cd other_dir
    PS4="${PS4}" bash -c "set -euxv
                          . '${VSI_COMMON_DIR}/linux/just_wrap' '../project1.env'
                          check_values"
  )
)
end_test

begin_test "Unwrapped test run"
(
  set -eu

  setup_test

  # Need to export some functions so that the bash full shell can finish
  export -f check_values check_a
  bash -eu "${VSI_COMMON_DIR}/linux/just_wrap" "${TRASHDIR}/project1.env" check_values
)
end_test