#****F* vsi/common_source.bsh
# NAME
#   common_source.bsh - Cross OS compatible common values files
# DESCRIPTION
#   There are many differences between bash scripts between Windows (using
#   mingw/cygwin), MacOS (which uses a MODIFIED version of bash 3.2), and the
#   many versions of Linux out there, that primarily use bash 4+. In addition to
#   the shell behaving different, many piece of basic information are retrieved
#   in different ways, such as the kind of OS, number of processor cores, etc...
#   This sets a collection of variables to try and normalize these behaviors for
#   other vsi scripts to use, no matter what OS they are running on.
# AUTHOR
#   Andy Neff
#***

#****d* common_source.bsh/VSI_OS
# NAME
#   VSI_OS - Operating system name
# DESCRIPTION
#   Lowercase representation of the Operating system name. Based off of the
#   OSTYPE environment variable, which is always defined in Bourne Shell.
# EXAMPLE
#   Values include linux, darwin, windows, bsd, solaris, and unknown
# AUTHOR
#   Andy Neff
#***
case "$OSTYPE" in
  linux*)
    VSI_OS=linux
    ;;
  darwin*)
    VSI_OS=darwin
    ;;
  win32*|cygwin*|msys*)
    VSI_OS=windows
    ;;
  bsd*|freebsd*)
    VSI_OS=bsd
    ;;
  solaris*)
    VSI_OS=solaris
    ;;
  *)
    VSI_OS=unknown
    ;;
esac

#Tested versions
# OSES=(clearlinux
# amazonlinux
# debian:7
# debian:9
# ubuntu:14.04
# ubuntu:17.04
# fedora:24
# fedora:26
# fedora:rawhide
# centos:7
# centos:6
# centos:5
# gidikern/rhel-oracle-jre
# mstormo/suse:11.3
# opensuse:13.2
# opensuse:tumbleweed
# vcatechnology/linux-mint:17 #IMAGE FAIL?
# vcatechnology/linux-mint:18.1
# ringo/scientific:6.3
# ringo/scientific:7.2)
# OSESSH=(busybox
# alpine)
# for os in "${OSES[@]}"; do
#   echo $os
#   docker run -v `pwd`:/vsi --rm $os bash -c ". /vsi/linux/common_source.bsh"
# done
# for os in "${OSESSH[@]}"; do
#   echo $os
#   docker run -v `pwd`:/vsi --rm $os sh -c ". /vsi/linux/common_source.bsh"
# done



if [ -f /etc/os-release ]; then
  # Run in a sub-shell so I can source os-release
  VSI_DISTRO=$( . /etc/os-release;
            # Capture ubuntu derivatives are debian derived
            if [ "${ID_LIKE}" == "ubuntu" ]; then
              ID_CORE=debian
            # If there is a space, this is like centos that says "rhel fedora"
            elif [ "${ID_LIKE}" != "${ID_LIKE%% *}" ]; then
              ID_CORE=${ID_LIKE#* }
              ID_LIKE=${ID_LIKE%% *}
            # Scientific Linux doesn't capture itself for some reason
            elif [ "${NAME}" == "Scientific Linux" ]; then
              ID_CORE=${ID_LIKE}
              ID_LIKE=${ID}
              ID=scientific
            fi

            # Some distros like mint store the like version here
            if [ "${UBUNTU_CODENAME+set}" == "set" ]; then
              : ${VERSION_LIKE=${UBUNTU_CODENAME}}
            fi

            # copy right
            : ${ID_LIKE=${ID}}
            : ${VERSION_LIKE=${VERSION_ID}}
            : ${ID_CORE=${ID_LIKE}}
            : ${VERSION_CORE=${VERSION_LIKE}}

            # Pass the results out out
            echo ${ID}:${VERSION_ID}:${ID_LIKE}:${VERSION_LIKE}:${ID_CORE}:${VERSION_CORE}
          )
  #DISTRO:VERSION:MIDDLE_DISTRO:MIDDLE_VERSION:CORE_DISTRO:CORE_VERSION
  # Parse the answer
  VSI_VERSION_CORE=${VSI_DISTRO##*:}
  VSI_DISTRO=${VSI_DISTRO%:*}
  VSI_DISTRO_CORE=${VSI_DISTRO##*:}
  VSI_DISTRO=${VSI_DISTRO%:*}
  VSI_VERSION_LIKE=${VSI_DISTRO##*:}
  VSI_DISTRO=${VSI_DISTRO%:*}
  VSI_DISTRO_LIKE=${VSI_DISTRO##*:}
  VSI_DISTRO=${VSI_DISTRO%:*}
  VSI_VERSION=${VSI_DISTRO##*:}
  VSI_DISTRO=${VSI_DISTRO%:*}

  # If a debian derivative
  if [ "${VSI_DISTRO}" != "${VSI_DISTRO_CORE}" ] && [ "${VSI_DISTRO_CORE}" == "debian" ]; then
    # Read the debian version here
    read VSI_VERSION_CORE < /etc/debian_version
  fi

# Remove this special case after 30 Nov 2020
# Older redhats don't have os-release. Read it here
elif [ -f /etc/redhat-release ]; then
  read VSI_DISTRO < /etc/redhat-release
  if [[ ${VSI_DISTRO} =~ "Scientific Linux" ]]; then
    VSI_VERSION=${VSI_DISTRO#* * * }
  else
    VSI_VERSION=${VSI_DISTRO#* * }
  fi

  # Remove all but the first part (the version)
  VSI_VERSION=${VSI_VERSION%% *}
  #get distro (lowercased)
  VSI_DISTRO=$(echo ${VSI_DISTRO%% *} | sed s'|.*|\L&|')
  # Need to be remain sh parsable compatible
  #VSI_DISTRO=$(sed s'|.*|\L&|' <<< ${VSI_DISTRO%% *})

# Remove this special case after 31 Mar 2022
# Older sles doesn't have an os-release. Read it here
elif [ -f /etc/SuSE-release ]; then
  {
    read VSI_DISTRO
    read VSI_VERSION
    read VSI_VERSION_LIKE
  }< /etc/SuSE-release

  # simplify
  if [[ $VSI_DISTRO =~ 'SUSE Linux Enterprise Server' ]]; then
    VSI_DISTRO=sles
  fi
  # Parse the version number out, and put it together
  VSI_VERSION=${VSI_VERSION##* }.${VSI_VERSION_LIKE##* }
  VSI_VERSION_LIKE=${VSI_VERSION}

# Special case for clearlinux
elif [ -f /usr/share/clear/version ]; then
  VSI_DISTRO='clearlinux'
  read VSI_VERSION < /usr/share/clear/version

# Special case for busybox
elif command -v busybox &>/dev/null; then
  VSI_DISTRO=$(busybox | head -n 1)
  VSI_VERSION=${VSI_DISTRO#* v}
  VSI_VERSION=${VSI_VERSION%% *}
  VSI_DISTRO=$(echo ${VSI_DISTRO%% *} | tr '[A-Z]' '[a-z]')
fi

# Handle rhel intricacies
if [ "${VSI_DISTRO}" == "centos" ] || [ "${VSI_DISTRO}" == "scientific" ] || \
   [ "${VSI_DISTRO}" == "rhel" ]; then
  VSI_DISTRO_CORE=fedora

  case ${VSI_VERSION} in
    4*) VSI_VERSION_CORE=3       ;; # Mostly EOL
    5*) VSI_VERSION_CORE=6       ;; # Extended EOL
    6*) VSI_VERSION_CORE="13 14" ;; # EOL Nov 30, 2020
    7*) VSI_VERSION_CORE=19      ;; # EOL Jun 30, 2024
  esac

  if [ "${VSI_DISTRO}" == "centos" ] || [ "${VSI_DISTRO}" == "scientific" ]; then
    : ${VSI_DISTRO_LIKE=rhel}
  elif [ "${VSI_DISTRO}" == "rhel" ]; then
    VSI_DISTRO_LIKE=${VSI_DISTRO_CORE}
  fi
fi

# Turn debian codenames to numbers
if [ "${VSI_DISTRO_CORE}" == "debian" ]; then
  # Remove the /sid for some debian derivatives
  VSI_VERSION_CORE=${VSI_VERSION_CORE%/sid}
  # turn codenames to numbers
  case ${VSI_VERSION_CORE} in
    squeeze)  VSI_VERSION_CORE=6  ;; # EOL Feb 29 2016
    wheezy)   VSI_VERSION_CORE=7  ;; # EOL May 2018
    jessie)   VSI_VERSION_CORE=8  ;; # EOL ~June 6 2020
    stretch)  VSI_VERSION_CORE=9  ;; # EOL 2022
    buster)   VSI_VERSION_CORE=10 ;; # Release ?
    bullseye) VSI_VERSION_CORE=11 ;; # Release ?
  esac
fi

# Fix the case when OSes like mint are like ubuntu but use the codename
if [ "${VSI_DISTRO_LIKE}" == "ubuntu" ]; then
  case ${VSI_VERSION_LIKE} in
    precise) VSI_VERSION_LIKE=12.04 ;; # EOL April 28, 2017
    trusty)  VSI_VERSION_LIKE=14.04 ;; # EOL April, 2019
    utopic)  VSI_VERSION_LIKE=14.10 ;; # EOL July 23,  2015
    vivid)   VSI_VERSION_LIKE=15.04 ;; # EOL Feb 4, 2016
    wily)    VSI_VERSION_LIKE=15.10 ;; # EOL July 28, 2016
    xenial)  VSI_VERSION_LIKE=16.04 ;; # EOL ~July 2021
    yakkety) VSI_VERSION_LIKE=16.10 ;; # EOL July 20, 2017
    zesty)   VSI_VERSION_LIKE=17.04 ;; # EOL Jan 2018
    artful)  VSI_VERSION_LIKE=17.10 ;; # Release Oct 2017
    busy)    VSI_VERSION_LIKE=18.04 ;; # Probably not right, Release April 2018
  esac
fi

# Copy unknowns right
: ${VSI_DISTRO_LIKE=${VSI_DISTRO}}
: ${VSI_VERSION_LIKE=${VSI_VERSION}}
: ${VSI_DISTRO_CORE=${VSI_DISTRO_LIKE}}
: ${VSI_VERSION_CORE=${VSI_VERSION_LIKE}}

# This makes copying version left easy
if [ "${VSI_DISTRO_CORE}" == "${VSI_DISTRO_LIKE}" ]; then
  VSI_VERSION_LIKE=${VSI_VERSION_CORE}
fi


# EXAMPLE
#   Possible values include (but may not be limited to)
#     i386 i686 x86_64 ia64 alpha amd64 arm armeb armel hppa m32r m68k mips
#     mipsel powerpc ppc64 s390 s390x sh3 sh3eb sh4 sh4eb sparc
#
#   Typically found: x86_64

VSI_ARCH=$(uname -m)

#****d* common_source.bsh/VSI_NUMBER_CORES
# NAME
#   VSI_NUMBER_CORES - Number of CPU cores
# DESCRIPTION
#   Determines the number of CPU cores available on the machine.
# AUTHOR
#   Andy Neff
#***
case "${VSI_OS}" in
  darwin)
    VSI_NUMBER_CORES=$(\sysctl -n hw.ncpu)
    ;;
  windows)
    VSI_NUMBER_CORES="${NUMBER_OF_PROCESSORS}"
    ;;
  *)
    if command -v nproc &>/dev/null; then
      VSI_NUMBER_CORES=$(nproc)
    elif [ -f /proc/cpuinfo ]; then
      VSI_NUMBER_CORES=$(grep processor /proc/cpuinfo | wc -l)
    else
      echo "Warning: unable to determine number of cores" >&2
      VSI_NUMBER_CORES=4
    fi
    ;;
esac
