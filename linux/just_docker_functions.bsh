JUST_DEFAULTIFY_FUNCTIONS+=(docker_defaultify)
JUST_HELP_FILES+=("${BASH_SOURCE[0]}")

source "${VSI_COMMON_DIR}/linux/docker_functions.bsh"

#*# just/plugins/docker/just_docker_functions

#**
# =========================
# J.U.S.T. Docker Functions
# =========================
#
# .. default-domain:: bash
#
# .. file:: just_docker_functions.bsh
#
# .. function:: docker_defaultify
#
# Show logs from all service containers. Optionally specify service names to only log specific containers.
#
# .. rubric:: Bug
#
# Does not pick up containers that didn't exist when starting ``just`` log
#
# Override the log target in your ``Justfile`` and call ``__docker-compose-log`` if you need to set other parameter.
#**
function docker_defaultify()
{
  arg=$1
  shift 1
  case $arg in
    build_recipes) # Build recipes
      JUST_DOCKER_COMPOSE_DIR="${VSI_COMMON_DIR}/docker/recipes" Docker-compose build ${@+"${@}"}
      extra_args+=$#
      ;;
    log) # Show logs from all service containers. Optionally specify service \
         # names to only log specific containers. Bug: Does not pick up \
         # containers that didn't exist when starting just log

      # Override the log target in your Justfile and call __docker-compose-log
      # if you need to set other parameters
      (justify __docker-compose-log ${@+"${@}"})
      extra_args+=$#
      ;;
    docker_clean) # Delete a docker volume. The next container to use this \
                  # volume will automatically copy any content from the image.
      if docker volume inspect "${1}" &> /dev/null; then
        Docker volume rm "${1}"
      else
        echo "${1} already removed" >&2
      #   run docker to delete all files
      fi
      extra_args+=1
      ;;
    docker-compose_clean) # Delete a docker-compose volume. The next container \
                          # to use this volume will automatically copy any
                          # content from the image.
      if docker volume inspect "${COMPOSE_PROJECT_NAME}_${1}" &> /dev/null; then
        Docker volume rm "${COMPOSE_PROJECT_NAME}_${1}"
      else
        echo "${COMPOSE_PROJECT_NAME}_${1} already removed" >&2
      #   run docker to delete all files
      fi
      extra_args+=1
      ;;
    __docker-compose-log)
      function stop_logging(){ JUST_STOP_LOGGING=1; }
      JUST_STOP_LOGGING=0
      trap stop_logging INT
      trap stop_logging TERM
      while [ "${JUST_STOP_LOGGING}" == "0" ]; do
        Docker-compose logs --tail=20 -f ${@+"${@}"} || echo $?
        while [ "${JUST_STOP_LOGGING}" == "0" ] && ! docker_service_running | grep running > /dev/null; do
          sleep 1
        done
      done
      trap - INT
      trap - TERM
      extra_args+=$#
      ;;
    *)
      plugin_not_found=1
      ;;
  esac
  return 0
}
