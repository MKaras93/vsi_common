#!/usr/bin/env false

#*# linux/string_tools

#**
# ============
# String Tools
# ============
#
# .. default-domain:: bash
#
# .. file:: string_tools.bsh
#
#**

#**
# .. function:: ltrim
#
# :Arguments: * ``$1`` - String to trim
#             * [``$2``] - Characters to trim. Default: [``:space:``]
# :Output: *stdout* - The trimmed string
#
# Left trim a string
#
# .. seealso::
#   :func:`trim`
#**
function ltrim()
{
  echo "${1#"${1%%[!${2-[:space:]}]*}"}"
}

#**
# .. function:: rtrim
#
# :Arguments: * ``$1`` - String to trim
#             * [``$2``] - Characters to trim. Default: [``:space:``]
# :Output: *stdout* - The trimmed string
#
# Right trim a string
#
# .. seealso::
#   :func:`trim`
#**
function rtrim()
{
  echo "${1%"${1##*[!${2-[:space:]}]}"}"
}

#**
# .. function:: trim
#
# :Arguments: * ``$1`` - String to trim
#             * [``$2``] - Characters to trim. Default: [``:space:``]. Can be another character or character classes, such as: alnum alpha ascii blank cntrl digit graph lower print punct space upper word xdigit. For multiple characters/classes, use standard pattern matching syntax, minus the []
# :Output: *stdout* - The trimmed string
#
# Trim a string
#
# .. rubric:: Example
#
# .. code-block:: bash
#
#   trim ' abcAcba ' # Trim the spaces
#   Result: 'abcAbca'
#
#   trim 'abcAcba' a # Trims the letter a off
#   Result: 'bcAcb'
#
#   trim 'abcAcba' [:lower:] # Trims lowercase letters
#   Result: 'A'
#
#   trim 'abcdAdcba' a-c # Trims range a-c
#   Result: 'dAd'
#
#   trim 'aebcAcbea' aeiou # Trims vowels
#   Result: 'bcAcb'
#
#   See Bash man on "Pattern Matching" for more possibilities. $2 is essentially
#   placed inside a set of []
#
# .. seealso::
#   :func:`ltrim` :func:`rtrim`
#**
function trim()
{
  local x
  x="${1#"${1%%[!${2-[:space:]}]*}"}"
  echo "${x%"${x##*[!${2-[:space:]}]}"}"
}
