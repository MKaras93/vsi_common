#!/usr/bin/env bash

set -eu

# Import ask_question
: ${VSI_COMMON_DIR="$(dirname "${BASH_SOURCE[0]}")/.."}
source "${VSI_COMMON_DIR}/linux/ask_question"

# Ask for notebook dir
: ${NOTEBOOK_DIR="$(read -r -p "The directory to use for notebooks [${HOME}/notebooks] " x; echo "$x")"}
if [ "${NOTEBOOK_DIR}" = "" ]; then
  "${NOTEBOOK_DIR}"=${HOME}/notebooks
else
  mkdir -p "${NOTEBOOK_DIR}"
  NOTEBOOK_DIR="$(cd "${NOTEBOOK_DIR}"; pwd)"
fi

# Ask about Notebook IP
: ${NOTEBOOK_IP="$(read -r -p "Notebook IP (127.0.0.1 for local only) [*] " x; echo "$x")"}
if [ "${NOTEBOOK_IP}" = "" ]; then
  NOTEBOOK_PORT='*'
fi

# More complicated solution would be
# pip install netifaces
# >>> from netifaces import AF_INET, AF_INET6, AF_LINK, AF_PACKET, AF_BRIDGE
# >>> import netifaces as ni
# >>> ni.interfaces()
# ['lo', 'eth0', 'eth1', 'vboxnet0', 'dummy1']
# >>>
# >>> ni.ifaddresses('eth0')[AF_LINK]   # NOTE: AF_LINK is an alias for AF_PACKET
# [{'broadcast': 'ff:ff:ff:ff:ff:ff', 'addr': '00:02:55:7b:b2:f6'}]
# >>> ni.ifaddresses('eth0')[AF_INET]
# [{'broadcast': '172.16.161.7', 'netmask': '255.255.255.248', 'addr': '172.16.161.6'}]


# Ask about Notebook Port
: ${NOTEBOOK_PORT="$(read -r -p "Notebook Port [8888] " x; echo "$x")"}
if [ "${NOTEBOOK_PORT}" = "" ]; then
  NOTEBOOK_PORT=8888
fi

# Ask about opening brwoser on start
ask_question "Would you like to open the browser on notebook start?" OPEN_BROWSER n
if [ "${OPEN_BROWSER}" == "0" ]; then
  OPEN_BROWSER=False
else
  OPEN_BROWSER=True
fi

# Set up token
ask_question "Would you like to use a random token (else fixed)?" USE_RANDOM_TOKEN n
if [ "${USE_RANDOM_TOKEN}" = "0" ]; then
  : ${TOKEN="$(read -r -p "Token: (blank disables token) [''] " x; echo "$x")"}
fi

# *****************************************************************************
# Done asking questions. Time to start making the environment
# *****************************************************************************

# Assume no python3, if there is python3, then change PYTHON2_VENV
PYTHON2_VENV=.

# Set up python3 venv
if which python3 &>/dev/null; then
  TEMP_DIR3=$(mktemp -d)
  PYTHONUSERBASE="${TEMP_DIR3}" python3 <(curl -L https://bootstrap.pypa.io/get-pip.py) --user virtualenv -U
  PYTHONPATH=$(echo "${TEMP_DIR3}"/lib/python*/site-packages/) "${TEMP_DIR3}"/bin/virtualenv .
  rm -rf "${TEMP_DIR3}"
  PYTHON2_VENV=python2
fi

# Set up python2 venv
if which python2 &>/dev/null; then
  TEMP_DIR2=$(mktemp -d)
  PYTHONUSERBASE="${TEMP_DIR2}" python2 <(curl -L https://bootstrap.pypa.io/get-pip.py) --user virtualenv -U
  PYTHONPATH=$(echo "${TEMP_DIR2}"/lib/python*/site-packages/) "${TEMP_DIR2}"/bin/virtualenv ${PYTHON2_VENV}
  rm -rf "${TEMP_DIR2}"
fi

# Setup config dir inside virtual env dir by monkey patching python executable

export JUPYTER_CONFIG_DIR="$(pwd)/jupyter_config"
export JUPYTER_DATA_DIR="$(pwd)/jupyter_data"


#****if* new_notebook/repr
# NAME
#   repr - Guarantee python style quoting
# INPUTS
#   $1 - String to be escaped
# OUTPUT
#   stdout - python representation of string, fully escaped when necessary
#***
function repr()
{
  python -c "import sys; print(repr(sys.argv[1]))" "$1"
}

#****if* new_notebook/relpath
# NAME
#   relpath - Relpath that should handle anything
# INPUTS
#   $1 - First path
#   $2 - Second path
# OUTPUT
#   stdout - Relative path of $1 with respect to $2
#***
function relpath()
{
  python -c "import os; print(os.path.relpath($(repr "$1"), $(repr "$2")))"
}

# Patch the python site so that calling jupyter without activating works with
# the custom jupyter path
#****if* new_notebook/patch_python_site
# NAME
#   patch_python_site
# INPUTS
#   $1 - location of site.py file
# OUTPUT
#   $1 is appended to
#***
function patch_python_site()
{
  local rel_config="$(relpath "${JUPYTER_CONFIG_DIR}" "$(dirname "$1")")"
  local rel_data="$(relpath "${JUPYTER_DATA_DIR}" "$(dirname "$1")")"
  echo "
os.environ['JUPYTER_CONFIG_DIR'] = os.path.abspath(os.path.join(os.path.dirname(__file__), '${rel_config}'))
os.environ['JUPYTER_DATA_DIR'] = os.path.abspath(os.path.join(os.path.dirname(__file__), '${rel_data}'))
" >> "${1}"
}

# Create local jupyter confog
mkdir -p ${JUPYTER_CONFIG_DIR}
echo "c.NotebookApp.ip = '${NOTEBOOK_IP}'
c.NotebookApp.port = ${NOTEBOOK_PORT}
c.NotebookApp.notebook_dir = '${NOTEBOOK_DIR}'
c.NotebookApp.open_browser = ${OPEN_BROWSER}
" > ${JUPYTER_CONFIG_DIR}/jupyter_notebook_config.py

if [ "${USE_RANDOM_TOKEN}" == "0" ]; then
  echo "c.NotebookApp.token = $(python -c "import sys; print(repr(sys.argv[1]))" "${TOKEN}")" >> ${JUPYTER_CONFIG_DIR}/jupyter_notebook_config.py
fi

# Disable PS1 stuff, so that set -eu doesn't error out
VIRTUAL_ENV_DISABLE_PROMPT=1
# Add the custom directories to the activate script so that it works
### echo "export JUPYTER_CONFIG_DIR='${JUPYTER_CONFIG_DIR}'" >> ./bin/activate
### echo "export JUPYTER_DATA_DIR='${JUPYTER_DATA_DIR}'" >> ./bin/activate
patch_python_site lib/python*/site.py
. bin/activate
pip install notebook jupyter-contrib-nbextensions bash_kernel ipywidgets -U
python -m ipykernel.kernelspec --user
python -m bash_kernel.install --user

jupyter contrib nbextension install --user
jupyter nbextension enable --py --user widgetsnbextension

deactivate

# If both python3 and python2, setup second kernel
if [ -d ./python2 ]; then
  echo "c.MultiKernelManager.default_kernel_name = 'python2'" >> ${JUPYTER_CONFIG_DIR}/jupyter_notebook_config.py

  patch_python_site ./python2/lib/python*/site.py
  . ./python2/bin/activate
  pip install ipykernel -U
  python -m ipykernel.kernelspec --user --name python2

  deactivate
fi

# Add add_kernel script
cat << EOF > ./bin/add_kernel
#!/usr/bin/env bash

set -eu

if python -c "import ipykernel_launcher" > /dev/null 2>&1; then
  ipykernel=ipykernel_launcher
elif python -c "import ipykernel" > /dev/null 2>&1; then
  ipykernel=ipykernel
else
  echo "IPython kernel not found."
  exit 1
fi

mkdir -p "\$(dirname "\${BASH_SOURCE[0]}")/../jupyter_data/kernels/\${1}"

cat << EOS > "\$(dirname "\${BASH_SOURCE[0]}")/../jupyter_data/kernels/\${1}/kernel.json"
{
 "display_name": "\${1}",
 "argv": [
  "\$(command -v python)",
  "-m",
  "\${ipykernel}",
  "-f",
  "{connection_file}"
 ],
 "env": {},
 "language": "python"
}
EOS
EOF
chmod 755 ./bin/add_kernel

# Add relocate script

cat << EOF > ./bin/relocate
#!/usr/bin/env bash

set -eu

full_path="\$(cd "\$(dirname "\${BASH_SOURCE[0]}")/.."; pwd)"

# Make sure activate is bash/zsh compliant _\|
sed -i 's|^VIRTUAL_ENV=.*|VIRTUAL_ENV="\$(cd "\$(dirname "\${BASH_SOURCE-"\$0"}")/.."; pwd)"|' "\${full_path}/bin/activate"
sed -i "s|^setenv VIRTUAL_ENV.*|setenv VIRTUAL_ENV '\${full_path}'|" "\${full_path}/bin/activate.csh"
sed -i "s|^set -gx VIRTUAL_ENV.*|set -gx VIRTUAL_ENV '\${full_path}'|" "\${full_path}/bin/activate.fish"

IFS=\$'\n'
files=(\$(find "\${full_path}/bin" -type f))

for f in "\${files[@]}"; do
  if grep -qi 'python.* script' <(file "\${f}"); then
    sed -i "1 s|#!.*/bin/|#!\${full_path}/bin/|" "\${f}"
  fi
done
EOF

echo
echo "---------------------------------"
echo
echo "Notebook configured successfully!"
echo
echo 'Run "jupyter-notebook password" to secure your notebook with a password'